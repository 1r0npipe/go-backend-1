openapi: 3.0.1
info:
 title: Shop
 version: 1.0.0
paths:
 /user/login:
   post:
     operationId: loginUser
     parameters:
     - name: username
       in: query
       description: The user name for login
       required: true
       schema:
         type: string
     - name: password
       in: query
       description: The password for login in clear text
       required: true
       schema:
         type: string
     responses:
       200:
         description: successful operation
         headers:
           X-Expires-After:
             description: date in UTC when token expires
             schema:
               type: string
               format: date-time
         content:
           application/json:
             schema:
               type: string
       400:
         description: Invalid username/password supplied
         content: {}
 /user/logout:
   post:
     summary: Logs out current logged in user session
     operationId: logoutUser
     responses:
       200:
         description: successful logout
         content: {}
Item:
 type: object
 properties:
   id:
     type: integer
     format: int64
   name:
     type: string
   description:
     type: string
   price:
     type: integer
     format: int64
   image_link:
     type: string
/items:
   post:
     summary: "Add a new item to the store"
     operationId: "CreateItem"
     consumes:
     - "application/json"
     produces:
     - "application/json"
     parameters:
     - in: "body"
       name: "body"
       description: "Item object that needs to be added to the store"
       required: true
       schema:
         $ref: "#/components/schemas/Item"
     responses:
       "405":
         description: "Invalid input"
     security:
     - api_key: []
   get:
     summary: Lists Items with filters
     operationId: ListItems
     parameters:
     - name: price_min
       in: query
       description: Lower price limit
       required: false
       schema:
        type: integer
        format: int64
     - name: price_max
       in: query
       description: Upper price limit
       required: false
       schema:
        type: integer
        format: int64
     responses:
       200:
         description: successful operation
         content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/Item'
       400:
         description: Invalid price range
         content: {}

/items/upload_image:
   post:
     summary: "uploads an image"
     operationId: "uploadFile"
     consumes:
     - "multipart/form-data"
     produces:
     - "application/json"
     parameters:
     - name: "additionalMetadata"
       in: "formData"
       description: "Additional data to pass to server"
       required: true
       type: "string"
     - name: "file"
       in: "formData"
       description: "file to upload"
       required: true
       type: "file"
     responses:
     security:
     - api_key: []
/items/{itemId}:
   get:
     summary: Find item by ID
     operationId: GetItem
     parameters:
     - name: itemId
       in: path
       description: ID of item to return
       required: true
       schema:
         type: integer
         format: int64
     responses:
       200:
         description: successful operation
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Item'
       400:
         description: Invalid ID supplied
         content: {}
   put:
     summary: Updates a item in the store with form data
     operationId: UpdateItem
     parameters:
     - name: itemId
       in: path
       description: ID of item that needs to be updated
       required: true
       schema:
         type: integer
         format: int64
     requestBody:
       content:
         application/json:
           schema:
             properties:
               name:
                 type: string
                 description: Updated name of the item
               status:
                 type: string
                 description: Updated status of the item
     responses:
       405:
         description: Invalid input
         content: {}
     security:
     - api_key: []
   delete:
     summary: Deletes a item
     operationId: DeleteItem
     parameters:
     - name: itemId
       in: path
       description: Item id to delete
       required: true
       schema:
         type: integer
         format: int64
     responses:
       400:
         description: Invalid ID supplied
         content: {}
       404:
         description: Item not found
         content: {}
     security:
     - api_key: []
/order:
    post:
      tags:
      - orders
      summary: Place an order for an Item
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the Item
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      x-codegen-request-body-name: body
      
/order/{orderId}:
    get:
      tags:
      - orders
      summary: Find the  order by ID
      description: IDs should be integer
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of Item that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    delete:
      tags:
      - orders
      summary: Delete purchase order by ID
      description: IDs should be integer >0
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
  
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header   
